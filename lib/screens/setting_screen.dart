import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:f5_health/app_data.dart';
import 'package:f5_health/services/notification_service.dart';
import 'package:kakao_flutter_sdk_user/kakao_flutter_sdk_user.dart';
import 'package:http/http.dart' as http;

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String nickname = 'ÏÇ¨Ïö©Ïûê';
  TimeOfDay? selectedTime;

  @override
  void initState() {
    super.initState();
    selectedTime = AppData.alarmTime;
  }

  final String _termsOfServiceText = '''
[ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä]

Ï†ú1Ï°∞ (Î™©Ï†Å)
Î≥∏ ÏïΩÍ¥ÄÏùÄ F5_HealthÍ∞Ä Ï†úÍ≥µÌïòÎäî Î™®Î∞îÏùº Í±¥Í∞ïÍ¥ÄÎ¶¨ ÏÑúÎπÑÏä§Ïùò Ïù¥Ïö©Ï°∞Í±¥ Î∞è Ï†àÏ∞®, ÏÇ¨Ïö©ÏûêÏôÄ F5_Health Í∞ÑÏùò Í∂åÎ¶¨¬∑ÏùòÎ¨¥ Î∞è Ï±ÖÏûÑÏÇ¨Ìï≠ÏùÑ Í∑úÏ†ïÌï®ÏùÑ Î™©Ï†ÅÏúºÎ°ú Ìï©ÎãàÎã§.

Ï†ú2Ï°∞ (Ï†ïÏùò)
1. "ÏÑúÎπÑÏä§"Îùº Ìï®ÏùÄ ÏÇ¨Ïö©ÏûêÏùò Í±¥Í∞ï Í¥ÄÎ†® ÏäµÍ¥ÄÏùÑ Í∏∞Î°ùÌïòÍ≥† Ïù¥Î•º Î∂ÑÏÑùÌïòÏó¨ Ï†êÏàò Î∞è ÌîºÎìúÎ∞±ÏùÑ Ï†úÍ≥µÌïòÎäî F5_Health Ïï±Ïùò Î™®Îì† Í∏∞Îä•ÏùÑ ÎßêÌï©ÎãàÎã§.
2. "ÌöåÏõê"Ïù¥Îùº Ìï®ÏùÄ Î≥∏ ÏïΩÍ¥ÄÏóê ÎèôÏùòÌïòÍ≥† ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©ÌïòÎäî ÏûêÎ•º ÎßêÌï©ÎãàÎã§.

Ï†ú3Ï°∞ (ÏïΩÍ¥ÄÏùò Ìö®Î†• Î∞è Î≥ÄÍ≤Ω)
1. Î≥∏ ÏïΩÍ¥ÄÏùÄ Ïï±Ïóê Í≤åÏãúÌïòÍ±∞ÎÇò ÏïåÎ¶º Îì±ÏùÑ ÌÜµÌï¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≥†ÏßÄÌï®ÏúºÎ°úÏç® Ìö®Î†•Ïù¥ Î∞úÏÉùÌï©ÎãàÎã§.
2. ÌöåÏÇ¨Îäî Í¥ÄÎ†® Î≤ïÎ†πÏùÑ Ï§ÄÏàòÌïòÎ©∞, ÏïΩÍ¥Ä ÎÇ¥Ïö©ÏùÑ Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÍ≥†, Î≥ÄÍ≤Ω Ïãú ÏÇ¨Ï†Ñ Í≥µÏßÄÌï©ÎãàÎã§.

Ï†ú4Ï°∞ (ÌöåÏõêÍ∞ÄÏûÖ Î∞è ÌÉàÌá¥)
1. ÌöåÏõêÍ∞ÄÏûÖÏùÄ Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ÏúºÎ°ú Ïù¥Î£®Ïñ¥ÏßÄÎ©∞, ÌöåÏõêÏùÄ Ïñ∏Ï†úÎì†ÏßÄ ÌÉàÌá¥Ìï† Ïàò ÏûàÏäµÎãàÎã§.
2. ÌöåÏõê ÌÉàÌá¥ Ïãú Î™®Îì† Îç∞Ïù¥ÌÑ∞Îäî Ï¶âÏãú ÏÇ≠Ï†úÎê©ÎãàÎã§. Îã®, Î≤ïÎ†πÏÉÅ ÏùòÎ¨¥Ïóê Îî∞Îùº Î≥¥Í¥ÄÏù¥ ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Îäî ÏòàÏô∏Î°ú Ìï©ÎãàÎã§.

Ï†ú5Ï°∞ (ÏÑúÎπÑÏä§ Ï†úÍ≥µ Î∞è Î≥ÄÍ≤Ω)
1. ÏÑúÎπÑÏä§Îäî Ïó∞Ï§ëÎ¨¥Ìú¥ 24ÏãúÍ∞Ñ Ï†úÍ≥µÎê©ÎãàÎã§. Îã®, Ï†êÍ≤Ä ÎòêÎäî Í∏∞Ïà†Ï†Å Î¨∏Ï†ú Î∞úÏÉù Ïãú ÏùºÏãúÏ†ÅÏúºÎ°ú Ï§ëÎã®Îê† Ïàò ÏûàÏäµÎãàÎã§.
2. F5_HealthÎäî ÏÑúÎπÑÏä§ ÎÇ¥Ïö©ÏùÑ Í∞úÏÑ†ÌïòÍ±∞ÎÇò Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÏúºÎ©∞, Ïù¥ Í≤ΩÏö∞ ÏÇ¨Ï†Ñ Í≥µÏßÄÌï©ÎãàÎã§.

Ï†ú6Ï°∞ (ÌöåÏõêÏùò ÏùòÎ¨¥)
1. ÌöåÏõêÏùÄ ÌÉÄÏù∏Ïùò Ï†ïÎ≥¥Î•º ÎèÑÏö©ÌïòÍ±∞ÎÇò, ÌóàÏúÑ Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥ÏÑúÎäî Ïïà Îê©ÎãàÎã§.
2. ÌöåÏõêÏùÄ F5_HealthÎ•º ÌÜµÌï¥ Ï†úÍ≥µÎêòÎäî Ï†ïÎ≥¥Î•º ÏÉÅÏóÖÏ†Å Î™©Ï†ÅÏúºÎ°ú Î¨¥Îã® Ïù¥Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.

Ï†ú7Ï°∞ (Ïö¥ÏòÅÏûêÏùò ÏùòÎ¨¥)
F5_HealthÎäî Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏ÏôÄ ÏÑúÎπÑÏä§ ÏïàÏ†ïÏÑ± ÌôïÎ≥¥Î•º ÏúÑÌï¥ ÏßÄÏÜçÏ†ÅÏúºÎ°ú Î≥¥Ïïà Î∞è Í¥ÄÎ¶¨ Ï≤¥Í≥ÑÎ•º Í∞úÏÑ†Ìï©ÎãàÎã§.

Ï†ú8Ï°∞ (Ï†ÄÏûëÍ∂å Î∞è Í≤åÏãúÎ¨º)
ÌöåÏõêÏù¥ ÏûëÏÑ±Ìïú Í∏∞Î°ù, ÌîºÎìúÎ∞± Îì±ÏùÄ ÌöåÏõê Î≥∏Ïù∏Ïùò Ï±ÖÏûÑ ÌïòÏóê Í≤åÏãúÎêòÎ©∞, ÌÉÄÏù∏Ïùò Í∂åÎ¶¨Î•º Ïπ®Ìï¥ÌïòÎäî Í≤ΩÏö∞ ÏÇ≠Ï†úÎê† Ïàò ÏûàÏäµÎãàÎã§.

Ï†ú9Ï°∞ (Î©¥Ï±ÖÏ°∞Ìï≠)
1. F5_HealthÎäî ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏùòÎ£åÏ†Å ÏßÑÎã® ÎòêÎäî Ï≤òÎ∞©ÏùÑ Ï†úÍ≥µÌïòÏßÄ ÏïäÏúºÎ©∞, Ïï±ÏóêÏÑú Ï†úÍ≥µÌïòÎäî Ï†ïÎ≥¥Îäî Ï∞∏Í≥†Ïö©ÏûÖÎãàÎã§.
2. ÏãúÏä§ÌÖú Ïû•Ïï†, Ï≤úÏû¨ÏßÄÎ≥Ä, Î∂àÍ∞ÄÌï≠Î†• Îì±ÏúºÎ°ú Ïù∏Ìï¥ Î∞úÏÉùÌïú ÏÑúÎπÑÏä§ Ï§ëÎã®Ïóê ÎåÄÌï¥ Ï±ÖÏûÑÏùÑ ÏßÄÏßÄ ÏïäÏäµÎãàÎã§.

Ï†ú10Ï°∞ (Î∂ÑÏüÅ Ìï¥Í≤∞)
Ïù¥ ÏïΩÍ¥ÄÏùÄ ÎåÄÌïúÎØºÍµ≠ Î≤ïÎ•†Ïóê Îî∞Îùº Ìï¥ÏÑùÎêòÎ©∞, Î∂ÑÏüÅ Î∞úÏÉù Ïãú Í¥ÄÌï† Î≤ïÏõêÏùÄ ÏÑúÏö∏Ï§ëÏïôÏßÄÎ∞©Î≤ïÏõêÏúºÎ°ú Ìï©ÎãàÎã§.

Î∂ÄÏπô
Ïù¥ ÏïΩÍ¥ÄÏùÄ 2025ÎÖÑ 5Ïõî 5ÏùºÎ∂ÄÌÑ∞ ÏãúÌñâÎê©ÎãàÎã§.
''';

  final String _privacyPolicyText = '''
[Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®]

F5_HealthÎäî Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏Î≤ï Ï†ú30Ï°∞Ïóê Îî∞Îùº Ï†ïÎ≥¥Ï£ºÏ≤¥Ïùò Í∞úÏù∏Ï†ïÎ≥¥Î•º Î≥¥Ìò∏ÌïòÍ≥† Ïù¥ÏôÄ Í¥ÄÎ†®Ìïú Í≥†Ï∂©ÏùÑ Ïã†ÏÜçÌïòÍ≥† ÏõêÌôúÌïòÍ≤å Ï≤òÎ¶¨Ìï† Ïàò ÏûàÎèÑÎ°ù ÌïòÍ∏∞ ÏúÑÌïòÏó¨ Îã§ÏùåÍ≥º Í∞ôÏù¥ Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®ÏùÑ ÏàòÎ¶Ω¬∑Í≥µÍ∞úÌï©ÎãàÎã§.

1. ÏàòÏßëÌïòÎäî Í∞úÏù∏Ï†ïÎ≥¥ Ìï≠Î™© Î∞è ÏàòÏßë Î∞©Î≤ï
F5_HealthÎäî Îã§ÏùåÍ≥º Í∞ôÏùÄ Í∞úÏù∏Ï†ïÎ≥¥Î•º ÏàòÏßëÌï©ÎãàÎã§.

- ÌïÑÏàò Ìï≠Î™©: Ïπ¥Ïπ¥Ïò§ Í≥ÑÏ†ï Ï†ïÎ≥¥(Ïù¥Î©îÏùº, ÎãâÎÑ§ÏûÑ, ÏÇ¨Ïö©Ïûê Í≥†Ïú† ID)
- ÏÑ†ÌÉù Ìï≠Î™©: ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
- Í±¥Í∞ï Í∏∞Î°ù Îç∞Ïù¥ÌÑ∞: ÏùåÏàòÎüâ, Ìù°Ïó∞Îüâ, ÏãùÏÇ¨ Í∏∞Î°ù, Í±∏Ïùå Ïàò Îì± ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞
- ÏàòÏßë Î∞©Î≤ï: Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ API, ÏÇ¨Ïö©Ïûê ÏßÅÏ†ë ÏûÖÎ†•, Í∏∞Í∏∞ ÏÑºÏÑú Ïó∞Îèô

2. Í∞úÏù∏Ï†ïÎ≥¥Ïùò ÏàòÏßë Î∞è Ïù¥Ïö© Î™©Ï†Å
- ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Î∞è ÏãùÎ≥Ñ
- Í±¥Í∞ï ÏäµÍ¥Ä Ï†êÏàò Ï†úÍ≥µ Î∞è ÌîºÎìúÎ∞± Ï†úÍ≥µ
- Ï†àÏïΩ Í∏àÏï° Î∂ÑÏÑù Î∞è Í±¥Í∞ï ÏïÑÏù¥ÌÖú Ï∂îÏ≤ú
- ÏïåÎ¶º Î∞è Î¶¨ÎßàÏù∏Îìú Í∏∞Îä• Ï†úÍ≥µ
- ÌÜµÍ≥Ñ Í∏∞Î∞ò Î¶¨Ìè¨Ìä∏ ÏûëÏÑ±

3. Í∞úÏù∏Ï†ïÎ≥¥Ïùò Î≥¥Ïú† Î∞è Ïù¥Ïö© Í∏∞Í∞Ñ
- ÌöåÏõê ÌÉàÌá¥ Ïãú ÎòêÎäî ÏàòÏßë Î™©Ï†Å Îã¨ÏÑ± Ïãú ÏßÄÏ≤¥ ÏóÜÏù¥ ÏÇ≠Ï†ú
- Î≤ïÎ†πÏóê ÏùòÌï¥ ÏùºÏ†ï Í∏∞Í∞Ñ Î≥¥Í¥ÄÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏòàÏô∏ Ï≤òÎ¶¨

4. Í∞úÏù∏Ï†ïÎ≥¥ Ï†ú3Ïûê Ï†úÍ≥µ Î∞è ÏúÑÌÉÅ
- ÏõêÏπôÏ†ÅÏúºÎ°ú Ï†ú3ÏûêÏóêÍ≤å Ï†úÍ≥µÌïòÏßÄ ÏïäÏúºÎ©∞, ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏÇ¨Ï†Ñ ÎèôÏùòÎ•º Î∞õÏùå
- ÏùºÎ∂Ä ÏÑúÎπÑÏä§Ïùò ÏïàÏ†ïÏ†Å Ïö¥ÏòÅÏùÑ ÏúÑÌï¥ Ïô∏Î∂Ä Ï†ÑÎ¨∏ ÏóÖÏ≤¥Ïóê ÏúÑÌÉÅÌï† Ïàò ÏûàÏùå

5. Ïù¥Ïö©ÏûêÏùò Í∂åÎ¶¨
- Í∞úÏù∏Ï†ïÎ≥¥ Ïó¥Îûå, Ï†ïÏ†ï, ÏÇ≠Ï†ú ÏöîÏ≤≠ Í∞ÄÎä•
- ÏöîÏ≤≠ Î∞©Î≤ï: Ïï± ÏÑ§Ï†ï ÎòêÎäî Ïù¥Î©îÏùº(f5health@app.com)

6. Í∞úÏù∏Ï†ïÎ≥¥ ÌååÍ∏∞ Ï†àÏ∞® Î∞è Î∞©Î≤ï
- Ï†ÑÏûê ÌååÏùºÏùÄ Î≥µÍµ¨ Î∂àÍ∞ÄÎä•Ìïú Î∞©ÏãùÏúºÎ°ú ÏòÅÍµ¨ ÏÇ≠Ï†ú
- Ï∂úÎ†•Î¨ºÏùÄ Î∂ÑÏáÑ ÎòêÎäî ÏÜåÍ∞Å

7. Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏Î•º ÏúÑÌïú Í∏∞Ïà†Ï†Å¬∑Í¥ÄÎ¶¨Ï†Å Ï°∞Ïπò
- SSL Îì± ÏïîÌò∏Ìôî Í∏∞Ïà† Ï†ÅÏö©
- Ï†ëÍ∑º Ï†úÌïú Î∞è Ïù∏Ï¶ù ÏãúÏä§ÌÖú Ïö¥ÏòÅ
- Î≥¥Ïïà Ï†êÍ≤Ä Î∞è Î°úÍ∑∏ Í¥ÄÎ¶¨

8. Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏Ï±ÖÏûÑÏûê
- Ïù¥Î¶Ñ: ÍπÄÍ¥ëÎ†¨
- Ïù¥Î©îÏùº: f5health@app.com

Î≥∏ Î∞©Ïπ®ÏùÄ 2025ÎÖÑ 5Ïõî 5ÏùºÎ∂ÄÌÑ∞ ÏãúÌñâÎê©ÎãàÎã§.
''';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ÏÑ§Ï†ï'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: ListView(
        children: [
          const Padding(
            padding: EdgeInsets.all(16.0),
            child: Text(
              'ÏÑ§Ï†ï Î©îÎâ¥',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
          _buildSettingItem(
            icon: Icons.person,
            title: 'ÎÇ¥ Ï†ïÎ≥¥ Î≥ÄÍ≤Ω',
            onTap: () => _showEditNicknameDialog(),
          ),
          _buildSettingItem(
            icon: Icons.notifications,
            title: selectedTime != null
                ? 'Í∏∞Î°ù ÏïåÎ¶º ÏãúÍ∞Ñ: ${selectedTime!.format(context)}'
                : 'Í∏∞Î°ù ÏïåÎ¶º ÏãúÍ∞Ñ ÏÑ§Ï†ï',
            onTap: () => _showTimePickerDialog(),
          ),
          _buildSettingItem(
            icon: Icons.article,
            title: 'ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä',
            onTap: () => _showTextDialog("ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä", _termsOfServiceText),
          ),
          _buildSettingItem(
            icon: Icons.lock,
            title: 'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®',
            onTap: () => _showTextDialog("Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®", _privacyPolicyText),
          ),
          const SizedBox(height: 24),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.black,
                foregroundColor: Colors.white,
              ),
              onPressed: _handleLogout,
              child: const Text('Log out'),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _handleLogout() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final refreshToken = prefs.getString('refresh_token');

      if (refreshToken != null) {
        final res = await http.post(
          Uri.parse('http://localhost:8080/logout'),
          headers: {
            'Content-Type': 'application/json',
            'Refresh-Token': refreshToken,
          },
        );
        debugPrint('üîå ÏÑúÎ≤Ñ Î°úÍ∑∏ÏïÑÏõÉ ÏùëÎãµ: ${res.statusCode}');
      }

      await UserApi.instance.logout();
      debugPrint('‚úÖ Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å');

      await prefs.clear();

      if (!mounted) return;
      Navigator.pushNamedAndRemoveUntil(context, '/login', (route) => false);
    } catch (e) {
      debugPrint('‚ùå Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®: $e');
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Î°úÍ∑∏ÏïÑÏõÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')),
      );
    }
  }

  Widget _buildSettingItem({
    required IconData icon,
    required String title,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Icon(icon),
      title: Text(title),
      trailing: const Icon(Icons.arrow_forward_ios, size: 16),
      onTap: onTap,
    );
  }

  void _showEditNicknameDialog() {
    final controller = TextEditingController(text: nickname);

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('ÎãâÎÑ§ÏûÑ Î≥ÄÍ≤Ω'),
        content: TextField(
          controller: controller,
          decoration: const InputDecoration(hintText: 'ÏÉà ÎãâÎÑ§ÏûÑ ÏûÖÎ†•'),
        ),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context), child: const Text('Ï∑®ÏÜå')),
          TextButton(
            onPressed: () {
              setState(() => nickname = controller.text);
              Navigator.pop(context);
            },
            child: const Text('Ï†ÄÏû•'),
          ),
        ],
      ),
    );
  }

  void _showTimePickerDialog() async {
    final now = TimeOfDay.now();
    final picked = await showTimePicker(
      context: context,
      initialTime: selectedTime ?? AppData.alarmTime ?? now,
    );

    if (picked != null) {
      setState(() => selectedTime = picked);
      AppData.alarmTime = picked;

      final prefs = await SharedPreferences.getInstance();
      final timeStr = timeOfDayToString(picked);
      await prefs.setString('alarm_time', timeStr);

      debugPrint("ÏïåÎ¶º ÏãúÍ∞Ñ Ï†ÄÏû•Îê®: $timeStr");

      await cancelAlarm();
      await scheduleDailyAlarm(picked);
    }
  }

  void _showTextDialog(String title, String content) {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text(title),
        content: SingleChildScrollView(child: Text(content)),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context), child: const Text('Îã´Í∏∞')),
        ],
      ),
    );
  }

  String timeOfDayToString(TimeOfDay time) {
    final hour = time.hour.toString().padLeft(2, '0');
    final minute = time.minute.toString().padLeft(2, '0');
    return '$hour:$minute';
  }
}


/*
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:f5_health/app_data.dart'; // Ï†ÑÏó≠ ÏÉÅÌÉú Ï†ëÍ∑º
import 'package:f5_health/services/notification_service.dart'; // ÏïåÎ¶º ÏòàÏïΩ/Ï∑®ÏÜå

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String nickname = 'ÏÇ¨Ïö©Ïûê';
  TimeOfDay? selectedTime;

  @override
  void initState() {
    super.initState();
    selectedTime = AppData.alarmTime;
  }

  final String _termsOfServiceText = '''
[ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä]

Ï†ú1Ï°∞ (Î™©Ï†Å)
Î≥∏ ÏïΩÍ¥ÄÏùÄ F5_HealthÍ∞Ä Ï†úÍ≥µÌïòÎäî Î™®Î∞îÏùº Í±¥Í∞ïÍ¥ÄÎ¶¨ ÏÑúÎπÑÏä§Ïùò Ïù¥Ïö©Ï°∞Í±¥ Î∞è Ï†àÏ∞®, ÏÇ¨Ïö©ÏûêÏôÄ F5_Health Í∞ÑÏùò Í∂åÎ¶¨¬∑ÏùòÎ¨¥ Î∞è Ï±ÖÏûÑÏÇ¨Ìï≠ÏùÑ Í∑úÏ†ïÌï®ÏùÑ Î™©Ï†ÅÏúºÎ°ú Ìï©ÎãàÎã§.

Ï†ú2Ï°∞ (Ï†ïÏùò)
1. "ÏÑúÎπÑÏä§"Îùº Ìï®ÏùÄ ÏÇ¨Ïö©ÏûêÏùò Í±¥Í∞ï Í¥ÄÎ†® ÏäµÍ¥ÄÏùÑ Í∏∞Î°ùÌïòÍ≥† Ïù¥Î•º Î∂ÑÏÑùÌïòÏó¨ Ï†êÏàò Î∞è ÌîºÎìúÎ∞±ÏùÑ Ï†úÍ≥µÌïòÎäî F5_Health Ïï±Ïùò Î™®Îì† Í∏∞Îä•ÏùÑ ÎßêÌï©ÎãàÎã§.
2. "ÌöåÏõê"Ïù¥Îùº Ìï®ÏùÄ Î≥∏ ÏïΩÍ¥ÄÏóê ÎèôÏùòÌïòÍ≥† ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©ÌïòÎäî ÏûêÎ•º ÎßêÌï©ÎãàÎã§.

Ï†ú3Ï°∞ (ÏïΩÍ¥ÄÏùò Ìö®Î†• Î∞è Î≥ÄÍ≤Ω)
1. Î≥∏ ÏïΩÍ¥ÄÏùÄ Ïï±Ïóê Í≤åÏãúÌïòÍ±∞ÎÇò ÏïåÎ¶º Îì±ÏùÑ ÌÜµÌï¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≥†ÏßÄÌï®ÏúºÎ°úÏç® Ìö®Î†•Ïù¥ Î∞úÏÉùÌï©ÎãàÎã§.
2. ÌöåÏÇ¨Îäî Í¥ÄÎ†® Î≤ïÎ†πÏùÑ Ï§ÄÏàòÌïòÎ©∞, ÏïΩÍ¥Ä ÎÇ¥Ïö©ÏùÑ Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÍ≥†, Î≥ÄÍ≤Ω Ïãú ÏÇ¨Ï†Ñ Í≥µÏßÄÌï©ÎãàÎã§.

Ï†ú4Ï°∞ (ÌöåÏõêÍ∞ÄÏûÖ Î∞è ÌÉàÌá¥)
1. ÌöåÏõêÍ∞ÄÏûÖÏùÄ Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ÏúºÎ°ú Ïù¥Î£®Ïñ¥ÏßÄÎ©∞, ÌöåÏõêÏùÄ Ïñ∏Ï†úÎì†ÏßÄ ÌÉàÌá¥Ìï† Ïàò ÏûàÏäµÎãàÎã§.
2. ÌöåÏõê ÌÉàÌá¥ Ïãú Î™®Îì† Îç∞Ïù¥ÌÑ∞Îäî Ï¶âÏãú ÏÇ≠Ï†úÎê©ÎãàÎã§. Îã®, Î≤ïÎ†πÏÉÅ ÏùòÎ¨¥Ïóê Îî∞Îùº Î≥¥Í¥ÄÏù¥ ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Îäî ÏòàÏô∏Î°ú Ìï©ÎãàÎã§.

Ï†ú5Ï°∞ (ÏÑúÎπÑÏä§ Ï†úÍ≥µ Î∞è Î≥ÄÍ≤Ω)
1. ÏÑúÎπÑÏä§Îäî Ïó∞Ï§ëÎ¨¥Ìú¥ 24ÏãúÍ∞Ñ Ï†úÍ≥µÎê©ÎãàÎã§. Îã®, Ï†êÍ≤Ä ÎòêÎäî Í∏∞Ïà†Ï†Å Î¨∏Ï†ú Î∞úÏÉù Ïãú ÏùºÏãúÏ†ÅÏúºÎ°ú Ï§ëÎã®Îê† Ïàò ÏûàÏäµÎãàÎã§.
2. F5_HealthÎäî ÏÑúÎπÑÏä§ ÎÇ¥Ïö©ÏùÑ Í∞úÏÑ†ÌïòÍ±∞ÎÇò Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÏúºÎ©∞, Ïù¥ Í≤ΩÏö∞ ÏÇ¨Ï†Ñ Í≥µÏßÄÌï©ÎãàÎã§.

Ï†ú6Ï°∞ (ÌöåÏõêÏùò ÏùòÎ¨¥)
1. ÌöåÏõêÏùÄ ÌÉÄÏù∏Ïùò Ï†ïÎ≥¥Î•º ÎèÑÏö©ÌïòÍ±∞ÎÇò, ÌóàÏúÑ Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥ÏÑúÎäî Ïïà Îê©ÎãàÎã§.
2. ÌöåÏõêÏùÄ F5_HealthÎ•º ÌÜµÌï¥ Ï†úÍ≥µÎêòÎäî Ï†ïÎ≥¥Î•º ÏÉÅÏóÖÏ†Å Î™©Ï†ÅÏúºÎ°ú Î¨¥Îã® Ïù¥Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.

Ï†ú7Ï°∞ (Ïö¥ÏòÅÏûêÏùò ÏùòÎ¨¥)
F5_HealthÎäî Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏ÏôÄ ÏÑúÎπÑÏä§ ÏïàÏ†ïÏÑ± ÌôïÎ≥¥Î•º ÏúÑÌï¥ ÏßÄÏÜçÏ†ÅÏúºÎ°ú Î≥¥Ïïà Î∞è Í¥ÄÎ¶¨ Ï≤¥Í≥ÑÎ•º Í∞úÏÑ†Ìï©ÎãàÎã§.

Ï†ú8Ï°∞ (Ï†ÄÏûëÍ∂å Î∞è Í≤åÏãúÎ¨º)
ÌöåÏõêÏù¥ ÏûëÏÑ±Ìïú Í∏∞Î°ù, ÌîºÎìúÎ∞± Îì±ÏùÄ ÌöåÏõê Î≥∏Ïù∏Ïùò Ï±ÖÏûÑ ÌïòÏóê Í≤åÏãúÎêòÎ©∞, ÌÉÄÏù∏Ïùò Í∂åÎ¶¨Î•º Ïπ®Ìï¥ÌïòÎäî Í≤ΩÏö∞ ÏÇ≠Ï†úÎê† Ïàò ÏûàÏäµÎãàÎã§.

Ï†ú9Ï°∞ (Î©¥Ï±ÖÏ°∞Ìï≠)
1. F5_HealthÎäî ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏùòÎ£åÏ†Å ÏßÑÎã® ÎòêÎäî Ï≤òÎ∞©ÏùÑ Ï†úÍ≥µÌïòÏßÄ ÏïäÏúºÎ©∞, Ïï±ÏóêÏÑú Ï†úÍ≥µÌïòÎäî Ï†ïÎ≥¥Îäî Ï∞∏Í≥†Ïö©ÏûÖÎãàÎã§.
2. ÏãúÏä§ÌÖú Ïû•Ïï†, Ï≤úÏû¨ÏßÄÎ≥Ä, Î∂àÍ∞ÄÌï≠Î†• Îì±ÏúºÎ°ú Ïù∏Ìï¥ Î∞úÏÉùÌïú ÏÑúÎπÑÏä§ Ï§ëÎã®Ïóê ÎåÄÌï¥ Ï±ÖÏûÑÏùÑ ÏßÄÏßÄ ÏïäÏäµÎãàÎã§.

Ï†ú10Ï°∞ (Î∂ÑÏüÅ Ìï¥Í≤∞)
Ïù¥ ÏïΩÍ¥ÄÏùÄ ÎåÄÌïúÎØºÍµ≠ Î≤ïÎ•†Ïóê Îî∞Îùº Ìï¥ÏÑùÎêòÎ©∞, Î∂ÑÏüÅ Î∞úÏÉù Ïãú Í¥ÄÌï† Î≤ïÏõêÏùÄ ÏÑúÏö∏Ï§ëÏïôÏßÄÎ∞©Î≤ïÏõêÏúºÎ°ú Ìï©ÎãàÎã§.

Î∂ÄÏπô
Ïù¥ ÏïΩÍ¥ÄÏùÄ 2025ÎÖÑ 5Ïõî 5ÏùºÎ∂ÄÌÑ∞ ÏãúÌñâÎê©ÎãàÎã§.
''';

  final String _privacyPolicyText = '''
[Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®]

F5_HealthÎäî Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏Î≤ï Ï†ú30Ï°∞Ïóê Îî∞Îùº Ï†ïÎ≥¥Ï£ºÏ≤¥Ïùò Í∞úÏù∏Ï†ïÎ≥¥Î•º Î≥¥Ìò∏ÌïòÍ≥† Ïù¥ÏôÄ Í¥ÄÎ†®Ìïú Í≥†Ï∂©ÏùÑ Ïã†ÏÜçÌïòÍ≥† ÏõêÌôúÌïòÍ≤å Ï≤òÎ¶¨Ìï† Ïàò ÏûàÎèÑÎ°ù ÌïòÍ∏∞ ÏúÑÌïòÏó¨ Îã§ÏùåÍ≥º Í∞ôÏù¥ Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®ÏùÑ ÏàòÎ¶Ω¬∑Í≥µÍ∞úÌï©ÎãàÎã§.

1. ÏàòÏßëÌïòÎäî Í∞úÏù∏Ï†ïÎ≥¥ Ìï≠Î™© Î∞è ÏàòÏßë Î∞©Î≤ï
F5_HealthÎäî Îã§ÏùåÍ≥º Í∞ôÏùÄ Í∞úÏù∏Ï†ïÎ≥¥Î•º ÏàòÏßëÌï©ÎãàÎã§.

- ÌïÑÏàò Ìï≠Î™©: Ïπ¥Ïπ¥Ïò§ Í≥ÑÏ†ï Ï†ïÎ≥¥(Ïù¥Î©îÏùº, ÎãâÎÑ§ÏûÑ, ÏÇ¨Ïö©Ïûê Í≥†Ïú† ID)
- ÏÑ†ÌÉù Ìï≠Î™©: ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
- Í±¥Í∞ï Í∏∞Î°ù Îç∞Ïù¥ÌÑ∞: ÏùåÏàòÎüâ, Ìù°Ïó∞Îüâ, ÏãùÏÇ¨ Í∏∞Î°ù, Í±∏Ïùå Ïàò Îì± ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞
- ÏàòÏßë Î∞©Î≤ï: Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ API, ÏÇ¨Ïö©Ïûê ÏßÅÏ†ë ÏûÖÎ†•, Í∏∞Í∏∞ ÏÑºÏÑú Ïó∞Îèô

2. Í∞úÏù∏Ï†ïÎ≥¥Ïùò ÏàòÏßë Î∞è Ïù¥Ïö© Î™©Ï†Å
- ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Î∞è ÏãùÎ≥Ñ
- Í±¥Í∞ï ÏäµÍ¥Ä Ï†êÏàò Ï†úÍ≥µ Î∞è ÌîºÎìúÎ∞± Ï†úÍ≥µ
- Ï†àÏïΩ Í∏àÏï° Î∂ÑÏÑù Î∞è Í±¥Í∞ï ÏïÑÏù¥ÌÖú Ï∂îÏ≤ú
- ÏïåÎ¶º Î∞è Î¶¨ÎßàÏù∏Îìú Í∏∞Îä• Ï†úÍ≥µ
- ÌÜµÍ≥Ñ Í∏∞Î∞ò Î¶¨Ìè¨Ìä∏ ÏûëÏÑ±

3. Í∞úÏù∏Ï†ïÎ≥¥Ïùò Î≥¥Ïú† Î∞è Ïù¥Ïö© Í∏∞Í∞Ñ
- ÌöåÏõê ÌÉàÌá¥ Ïãú ÎòêÎäî ÏàòÏßë Î™©Ï†Å Îã¨ÏÑ± Ïãú ÏßÄÏ≤¥ ÏóÜÏù¥ ÏÇ≠Ï†ú
- Î≤ïÎ†πÏóê ÏùòÌï¥ ÏùºÏ†ï Í∏∞Í∞Ñ Î≥¥Í¥ÄÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏòàÏô∏ Ï≤òÎ¶¨

4. Í∞úÏù∏Ï†ïÎ≥¥ Ï†ú3Ïûê Ï†úÍ≥µ Î∞è ÏúÑÌÉÅ
- ÏõêÏπôÏ†ÅÏúºÎ°ú Ï†ú3ÏûêÏóêÍ≤å Ï†úÍ≥µÌïòÏßÄ ÏïäÏúºÎ©∞, ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏÇ¨Ï†Ñ ÎèôÏùòÎ•º Î∞õÏùå
- ÏùºÎ∂Ä ÏÑúÎπÑÏä§Ïùò ÏïàÏ†ïÏ†Å Ïö¥ÏòÅÏùÑ ÏúÑÌï¥ Ïô∏Î∂Ä Ï†ÑÎ¨∏ ÏóÖÏ≤¥Ïóê ÏúÑÌÉÅÌï† Ïàò ÏûàÏùå

5. Ïù¥Ïö©ÏûêÏùò Í∂åÎ¶¨
- Í∞úÏù∏Ï†ïÎ≥¥ Ïó¥Îûå, Ï†ïÏ†ï, ÏÇ≠Ï†ú ÏöîÏ≤≠ Í∞ÄÎä•
- ÏöîÏ≤≠ Î∞©Î≤ï: Ïï± ÏÑ§Ï†ï ÎòêÎäî Ïù¥Î©îÏùº(f5health@app.com)

6. Í∞úÏù∏Ï†ïÎ≥¥ ÌååÍ∏∞ Ï†àÏ∞® Î∞è Î∞©Î≤ï
- Ï†ÑÏûê ÌååÏùºÏùÄ Î≥µÍµ¨ Î∂àÍ∞ÄÎä•Ìïú Î∞©ÏãùÏúºÎ°ú ÏòÅÍµ¨ ÏÇ≠Ï†ú
- Ï∂úÎ†•Î¨ºÏùÄ Î∂ÑÏáÑ ÎòêÎäî ÏÜåÍ∞Å

7. Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏Î•º ÏúÑÌïú Í∏∞Ïà†Ï†Å¬∑Í¥ÄÎ¶¨Ï†Å Ï°∞Ïπò
- SSL Îì± ÏïîÌò∏Ìôî Í∏∞Ïà† Ï†ÅÏö©
- Ï†ëÍ∑º Ï†úÌïú Î∞è Ïù∏Ï¶ù ÏãúÏä§ÌÖú Ïö¥ÏòÅ
- Î≥¥Ïïà Ï†êÍ≤Ä Î∞è Î°úÍ∑∏ Í¥ÄÎ¶¨

8. Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏Ï±ÖÏûÑÏûê
- Ïù¥Î¶Ñ: ÍπÄÍ¥ëÎ†¨
- Ïù¥Î©îÏùº: f5health@app.com

Î≥∏ Î∞©Ïπ®ÏùÄ 2025ÎÖÑ 5Ïõî 5ÏùºÎ∂ÄÌÑ∞ ÏãúÌñâÎê©ÎãàÎã§.
''';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ÏÑ§Ï†ï'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: ListView(
        children: [
          const Padding(
            padding: EdgeInsets.all(16.0),
            child: Text(
              'ÏÑ§Ï†ï Î©îÎâ¥',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
          _buildSettingItem(
            icon: Icons.person,
            title: 'ÎÇ¥ Ï†ïÎ≥¥ Î≥ÄÍ≤Ω',
            onTap: () => _showEditNicknameDialog(),
          ),
          _buildSettingItem(
            icon: Icons.notifications,
            title: selectedTime != null
                ? 'Í∏∞Î°ù ÏïåÎ¶º ÏãúÍ∞Ñ: ${selectedTime!.format(context)}'
                : 'Í∏∞Î°ù ÏïåÎ¶º ÏãúÍ∞Ñ ÏÑ§Ï†ï',
            onTap: () => _showTimePickerDialog(),
          ),
          _buildSettingItem(
            icon: Icons.article,
            title: 'ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä',
            onTap: () => _showTextDialog("ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä", _termsOfServiceText),
          ),
          _buildSettingItem(
            icon: Icons.lock,
            title: 'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®',
            onTap: () => _showTextDialog("Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®", _privacyPolicyText),
          ),
          const SizedBox(height: 24),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.black,
                foregroundColor: Colors.white,
              ),
              onPressed: () async {
                // TODO: Kakao Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
                Navigator.pushReplacementNamed(context, '/login');
              },
              child: const Text('Log out'),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSettingItem({
    required IconData icon,
    required String title,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Icon(icon),
      title: Text(title),
      trailing: const Icon(Icons.arrow_forward_ios, size: 16),
      onTap: onTap,
    );
  }

  void _showEditNicknameDialog() {
    final controller = TextEditingController(text: nickname);

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('ÎãâÎÑ§ÏûÑ Î≥ÄÍ≤Ω'),
        content: TextField(
          controller: controller,
          decoration: const InputDecoration(hintText: 'ÏÉà ÎãâÎÑ§ÏûÑ ÏûÖÎ†•'),
        ),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context), child: const Text('Ï∑®ÏÜå')),
          TextButton(
            onPressed: () {
              setState(() => nickname = controller.text);
              Navigator.pop(context);
            },
            child: const Text('Ï†ÄÏû•'),
          ),
        ],
      ),
    );
  }

  void _showTimePickerDialog() async {
    final now = TimeOfDay.now();
    final picked = await showTimePicker(
      context: context,
      initialTime: selectedTime ?? AppData.alarmTime ?? now,
    );

    if (picked != null) {
      setState(() => selectedTime = picked);
      AppData.alarmTime = picked;

      final prefs = await SharedPreferences.getInstance();
      final timeStr = timeOfDayToString(picked);
      await prefs.setString('alarm_time', timeStr);

      debugPrint("ÏïåÎ¶º ÏãúÍ∞Ñ Ï†ÄÏû•Îê®: $timeStr");

      await cancelAlarm();
      await scheduleDailyAlarm(picked);
    }
  }

  void _showTextDialog(String title, String content) {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text(title),
        content: SingleChildScrollView(child: Text(content)),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context), child: const Text('Îã´Í∏∞')),
        ],
      ),
    );
  }

  String timeOfDayToString(TimeOfDay time) {
    final hour = time.hour.toString().padLeft(2, '0');
    final minute = time.minute.toString().padLeft(2, '0');
    return '$hour:$minute';
  }
}

*/